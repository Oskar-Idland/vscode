// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+l",
            "command": "extension.multiCommand.execute",
            "args": {
            "sequence": [
                "cSpell.goToPreviousSpellingIssue",
                {
                    "command": "editor.action.codeAction",
                    "args": {
                        "kind": "quickfix",
                        "apply": "first"
                    }
                },
                "cursorUndo",
            ]
        }
    },
    
    {
        "key": "alt+right",
        "command": "cursorWordPartRight",
        "when": "editorTextFocus",
    },
    
    {
        "key": "ctrl+k",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.marker.prev",
                {
                    "command": "editor.action.codeAction",
                    "args": {
                        "kind": "quickfix",
                        "apply": "first"
                    }
                },
                "cursorUndo",
            ]
        }
     },
    
    // Navigate buffers
    {
        "key": "shift+enter",
        "command": "code-runner.run"
    },
    {
        "key": "ctrl+alt+n",
        "command": "-code-runner.run"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'"
    },
    {
        "key": "shift+enter",
        "command": "language-julia.executeActiveFile",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "shift+enter",
        "command": "language-julia.executeFile",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.execSelectionInteractive",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !jupyter.webExtension && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "interactive.execute",
        "when": "!notebookKernel && resourceScheme == 'vscode-interactive' || resourceScheme == 'vscode-interactive' && notebookKernel =~ /^ms-toolsai.jupyter\\//"
    },
    {
        "key": "shift+enter",
        "command": "-interactive.execute",
        "when": "!notebookKernel && resourceScheme == 'vscode-interactive' || resourceScheme == 'vscode-interactive' && notebookKernel =~ /^ms-toolsai.jupyter\\//"
    },
    {
        "key": "shift+tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "shift+tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible"
    },
    {
        "key": "shift+tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    // {"key": "tab", "command": "-acceptSelectedSuggestion", "when": "editorTextFocus && suggestWidgetVisible"},    
    // {"key": "tab", "command": "acceptSelectedSuggestion", "when": "editorTextFocus && suggestWidgetVisible && !inSnippetMode" }, 
    {
        "key": "shift+enter",
        "command": "latex-workshop.build",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && !virtualWorkspace && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-latex-workshop.build",
        "when": "!config.latex-workshop.bind.altKeymap.enabled && !virtualWorkspace && editorLangId =~ /^latex$|^latex-expl3$|^rsweave$|^jlweave$|^pweave$/"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "jupyter.runcurrentcelladvance"
    },
    {
        "key": "ctrl+enter",
        "command": "-jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "ctrl+k m",
        "command": "-workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.reloadWindow"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "shift+tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && tabnine.tab-override && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && tabnine.tab-override && !editorTabMovesFocus"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "bracket-jumper.jumpLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-bracket-jumper.jumpLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+c",
        "command": "conceal.togglePrettySymbols"
    },
    {
        "key": "ctrl+alt+j",
        "command": "ipynb.newUntitledIpynb"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+alt+enter",
        "command": "editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+enter",
        "command": "-notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.executeAndSelectBelow"
    },
    {
        "key": "ctrl+shift+c",
        "command": "editor.action.toggleColumnSelection"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "jumpy2.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+enter",
        "command": "-jumpy2.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+j ctrl+j",
        "command": "jumpToHint.jumpByWord",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+j w",
        "command": "-jumpToHint.jumpByWord",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+j ctrl+l",
        "command": "jumpToHint.jumpByLine",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+j l",
        "command": "-jumpToHint.jumpByLine",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+[Comma]",
        "command": "workbench.action.openSettingsJson"
    },
    {
        "key": "ctrl+shift+o",
        "command": "workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+alt+e",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+alt+t",
        "command": "terminal.focus"
    },
    {
        "key": "ctrl+shift+alt+c",
        "command": "copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+alt+p",
        "command": "workbench.profiles.actions.switchProfile"
    },
    {
        "key": "ctrl+[Minus]",
        "command": "editor.action.fontZoomIn"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+shift+[Minus]",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad_add",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+[Minus]",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+[Semicolon]",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+shift+[Equal]",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+'",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+7",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-latex-utilities.formattedPaste",
        "when": "editorTextFocus && !config.latex-utilities.formattedPaste.useAsDefault && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+alt+v",
        "command": "latex-utilities.formattedPaste",
        "when": "config.latex-utilities.formattedPaste.useAsDefault && editorTextFocus && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+v",
        "command": "-latex-utilities.formattedPaste",
        "when": "config.latex-utilities.formattedPaste.useAsDefault && editorTextFocus && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+shift+d",
        "command": "editor.action.moveSelectionToPreviousFindMatch"
    }
]